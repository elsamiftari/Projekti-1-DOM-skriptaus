const form = document.getElementById('todoForm');      // Lomake elementti
const input = document.getElementById('todoInput');     // Tekstikentt√§ uusiin teht√§viin
const list = document.getElementById('todoList');       // Teht√§v√§lista HTML:ss√§
const error = document.getElementById('error');         // Virheilmoitus
const summaryList = document.getElementById('summaryList'); // Teht√§v√§yhteenveto
const counter = document.getElementById('counter');     // N√§ytt√§√§ avoimien teht√§vien m√§√§r√§n
const showAllBtn = document.getElementById('showAllBtn');   // "Show all tasks" -nappi
const showActiveBtn = document.getElementById('showActiveBtn'); // "Active" -nappi
const showDoneBtn = document.getElementById('showDoneBtn');     // "Done" -nappi

let todos = JSON.parse(localStorage.getItem('todos')) || []; // Teht√§v√§lista localStoragesta tai tyhj√§
let summaryVisible = false;   // Onko yhteenveto n√§kyviss√§
let filter = 'all';           
function saveTodos() { 
    localStorage.setItem('todos', JSON.stringify(todos)); // Tallenna teht√§v√§t localStorageen
}

function renderCounter() { 
    const activeCount = todos.filter(todo => !todo.done).length; // Laske avoimet teht√§v√§t
    counter.textContent = `Open tasks: ${activeCount}`;          // N√§yt√§ laskuri
}

function renderTodos() { 
    list.innerHTML = ''; // Tyhjenn√§ lista
    todos.forEach((todo, index) => {
        if ((filter === 'active' && todo.done) || (filter === 'done' && !todo.done)) return; 
        const li = document.createElement('li'); 
        li.className = todo.done ? 'done' : ''; // Merkitse teht√§v√§ tehdyksi
        const span = document.createElement('span'); 
        span.textContent = todo.text; 
        li.appendChild(span); 

        const buttons = document.createElement('div'); 
        const doneBtn = document.createElement('button'); 
        doneBtn.textContent = '‚úî'; 
        doneBtn.onclick = () => toggleDone(index); // Merkitse tehdyksi

        const delBtn = document.createElement('button'); 
        delBtn.textContent = 'üóë'; 
        delBtn.onclick = () => deleteTodo(index); // Poista teht√§v√§

        buttons.append(doneBtn, delBtn); 
        li.appendChild(buttons); 
        list.appendChild(li); 
    });
    renderCounter(); // P√§ivit√§ laskuri
}

function renderSummary() { 
    summaryList.innerHTML = ''; // Tyhjenn√§ summary-lista
    todos.forEach(todo => {
        if ((filter === 'active' && todo.done) || (filter === 'done' && !todo.done)) return; 
        const li = document.createElement('li'); 
        li.textContent = todo.text + (todo.done ? ' (done)' : ' (pending)'); 
        summaryList.appendChild(li); 
    });
}

function addTodo(text) { 
    todos.push({ text, done: false }); // Lis√§√§ uusi teht√§v√§
    saveTodos(); 
    renderTodos(); 
    if (summaryVisible) renderSummary(); // P√§ivit√§ summary, jos n√§kyviss√§
}

function toggleDone(index) { 
    todos[index].done = !todos[index].done; // Vaihda tila
    saveTodos(); 
    renderTodos(); 
    if (summaryVisible) renderSummary(); 
}

function deleteTodo(index) { 
    todos.splice(index, 1); // Poista teht√§v√§
    saveTodos(); 
    renderTodos(); 
    if (summaryVisible) renderSummary(); 
}

form.addEventListener('submit', (e) => { 
    e.preventDefault(); 
    const value = input.value.trim(); 
    if (value.length < 3) { 
        error.textContent = 'Type at least 3 characters!'; 
        input.classList.add('error-border'); // Lis√§√§ virhetyyli
        return; 
    }
    error.textContent = ''; 
    input.classList.remove('error-border'); 
    addTodo(value); // Lis√§√§ teht√§v√§
    input.value = ''; // Tyhjenn√§ kentt√§
});

// Show all tasks sek√§ summary
showAllBtn.addEventListener('click', () => { 
    summaryVisible = !summaryVisible; 
    if (summaryVisible) { 
        renderSummary(); 
        summaryList.style.display = 'block'; 
        showAllBtn.textContent = 'Hide tasks'; 
    } else { 
        summaryList.style.display = 'none'; 
        showAllBtn.textContent = 'Show all tasks'; 
    }
});

// Filter napit
showActiveBtn.addEventListener('click', () => { 
    filter = 'active'; 
    renderTodos(); 
    if (summaryVisible) renderSummary(); 
});

showDoneBtn.addEventListener('click', () => { 
    filter = 'done'; 
    renderTodos(); 
    if (summaryVisible) renderSummary(); 
});

renderTodos(); 
summaryList.style.display = 'none'; // T√§m√§ piilota summary aluksi
